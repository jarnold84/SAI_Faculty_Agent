
# Scraping Agent #1 - Safety Checklist

*Reference this document before every proposed change*

## 🔒 MANDATORY Pre-Change Checks

### 1. **Golden Fixture Protection** (CRITICAL)
```bash
# ALWAYS run this first
python -m pytest tests/test_golden_fixtures.py::test_fresno_music_golden_fixture -v
```
- **MUST PASS** before any change
- If fails, **STOP** and investigate immediately
- This protects our locked 36-faculty extraction from Fresno State

### 2. **Import System Safety**
```bash
# Test all imports work
python -c "import sys; sys.path.append('.'); from api.server import scrape_faculty_directory; print('✅ All imports working')"
```
- Check for circular imports
- Verify no missing dependencies

### 3. **Port/Process Management**
```bash
# Kill any stuck processes
pkill -f "uvicorn\|python.*main.py" 2>/dev/null || true
```
- Always clean up before testing
- Port 5000 is our standard (configured for Replit)

---

## 📋 Change Type Checklists

### Strategy Changes (extract/strategies/)
- [ ] Backup current commit: `git log --oneline -1`
- [ ] Run golden fixture test (must pass)
- [ ] Test import system
- [ ] Changes must not affect other strategies
- [ ] Test with Fresno State fixture after change
- [ ] Shared code goes in utilities only

### Schema Changes (schemas/)
- [ ] **CRITICAL**: Can break Make.com integration
- [ ] Test existing API responses still validate
- [ ] Update tests if schema fields change
- [ ] Consider versioning if breaking changes
- [ ] Check normalization logic compatibility

### API Changes (api/server.py)
- [ ] Maintain backward compatibility in JSON structure
- [ ] Test with actual curl commands
- [ ] Verify /health and /scrape endpoints work
- [ ] Check response format matches expectations

### Normalization Changes (normalize/)
- [ ] Test with multiple data formats
- [ ] Email status tracking must remain consistent
- [ ] Run golden fixture to verify no regressions
- [ ] Test edge cases (empty data, malformed emails)

---

## 🚨 HIGH-RISK Areas

### NEVER Touch Without Explicit Request
- [ ] `.replit` file (port configurations)
- [ ] `pyproject.toml` (dependencies)
- [ ] `main.py` port settings (5000 is standard)

### Approach With Extreme Caution
- [ ] Strategy loading logic
- [ ] Email status classification
- [ ] JSON response structure
- [ ] Test fixture files

---

## 🛡️ Validation Steps

### After EVERY Change
```bash
# 1. Smoke test
python -m pytest tests/test_smoke.py -v

# 2. Golden test (CRITICAL)
python -m pytest tests/test_golden_fixtures.py -v

# 3. Import test
python -c "from main import app; print('✅ App imports OK')"

# 4. Server start test
python main.py &
sleep 3
curl http://localhost:5000/health
pkill -f "python main.py"
```

### Success Criteria - ALL Must Pass
- [ ] All existing tests green
- [ ] Golden fixture extracts 36 items from Fresno State
- [ ] API response schema unchanged (unless explicitly modified)
- [ ] Server starts without errors
- [ ] No new import/syntax errors

---

## 🔄 Recovery Procedures

### If Golden Test Fails
```bash
# STOP immediately
git status
git log --oneline -5

# Find last working commit
# Revert to it
git reset --hard [LAST_WORKING_COMMIT]

# Verify recovery
python -m pytest tests/test_golden_fixtures.py -v
```

### If Server Won't Start
```bash
# 1. Kill processes
lsof -ti:5000 | xargs kill -9 2>/dev/null || true

# 2. Check syntax
python -m py_compile main.py

# 3. Test imports
python -c "from main import app"

# 4. Check for port conflicts
netstat -tlnp | grep :5000
```

### If Imports Break
```bash
# Check Python path
python -c "import sys; print('\n'.join(sys.path))"

# Test each module
python -c "import api.server"
python -c "import extract.strategies.directory_table"
python -c "import normalize.normalize"
```

---

## ⚡ Emergency Commands

### Quick Status Check
```bash
# Full system check
echo "=== Git Status ==="
git status --short
echo "=== Last Commits ==="
git log --oneline -3
echo "=== Golden Test ==="
python -m pytest tests/test_golden_fixtures.py::test_fresno_music_golden_fixture -v
echo "=== Import Test ==="
python -c "from main import app; print('✅ All systems OK')"
```

### Quick Recovery Template
```bash
# Emergency rollback
git stash  # Save current work
git reset --hard [KNOWN_GOOD_COMMIT]
python -m pytest tests/test_golden_fixtures.py -v  # Verify
```

---

## 🎯 Key Safety Principles

1. **Golden Fixture is Sacred** - Never break Fresno State test
2. **Small Atomic Changes** - One thing at a time
3. **Test Before Commit** - All checks must pass
4. **Know Your Rollback** - Always have escape route
5. **Fail Fast** - If tests fail, stop and investigate

---

## 📊 Change Impact Matrix

| Change Type | Risk Level | Required Tests | Recovery Time |
|-------------|------------|----------------|---------------|
| Strategy tweak | 🟡 Medium | Golden + Imports | 5 min |
| Schema change | 🔴 High | All tests + API | 15 min |
| New strategy | 🟢 Low | Golden + Strategy | 10 min |
| API endpoint | 🔴 High | All tests + Manual | 20 min |
| Normalizer | 🟡 Medium | Golden + Data tests | 10 min |

---

## 🔍 Before You Start Checklist

- [ ] I know what I'm changing and why
- [ ] I have the current working commit hash
- [ ] Golden test is currently passing
- [ ] I understand the rollback procedure
- [ ] I've allocated time for proper testing
- [ ] I won't modify high-risk files unless requested

---

*This checklist has prevented multiple regression cycles. Follow it religiously.*
